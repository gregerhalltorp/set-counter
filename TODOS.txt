[X] 0.  ESLINT!
[X] 1.  Actioncreators + actions
[X] 2.  Load localStorage, put that in store
[X] 3.  How to do the storage side effect?
[X] 4.  Prop types
[X] 5.  Rethink store some
[X] 6.  Firebase Auth
[X] 7.  Experiment with firebase
[X] 8.  Sagas
[ ] 9.  (save to firebase)
[X] 10. Refactor some more: Create ExerciseHandler, can take some props and be connected => Reselect
[X] 11. Reselect (move that logic there)
[X] 12. Rethink store, this is no good (best after understanding some auth, will affect this!)
[ ] 13. Refactor! Refactor! Refactor!
[ ] 13. Features


Model can now be used as is (map field on document) or populate exercises as subcollection of user and sets as a
subcollection of exercise.
To move A -> B requires that field exercises on user be moved from map to subcollection.
On login get user document. If it has exercise field, load that and write it to collection (and load into state). 
Else if it has exercise subcollection, load from that. Write both to new structure. (New name might be necessary)

Some sort of toggle for "guest mode" is necessary, think about it!

Is offline really functional? If users can create new exercises then no. Sets are ok (if you break it its your own fault!)

Better syncing is necessary! Maybe split up localStorage on users? To enable multiple logins?
Sync exercises separate from each other?

Indicate login modes!
Indicate syncing?

* ids: node-uuid (node-uuid.v4())
* toastr: start here: https://github.com/diegoddox/react-redux-toastr



